{
  "_id": "5b847293d9f9972c8de2efa0",
  "_type": "CodeStage",
  "code_file_ids": [
    "5b84730ed9f9972c8de2efa1",
    "5b847341d9f9972c8de2efa2"
  ],
  "completion_message": "",
  "container_id": "5b8332b6d9f99799d09d5bdf",
  "details": "## Bits\n\nBits are the number of binary 1's and 0's in memory we can use to store the value of our variable. \n\nFor an unsigned (no positive or negative indication) integer we can store values from `0` to `2^n - 1`  where `n` is the number of bits. So for a 4-bit unsigned integer we would expect to be able to store from `0` to `15`.\n\nSolidity allows us to create unsigned integers using the `uint` keyword and we can designate the storage space in steps of 8 from 8 to 256 by adding the number to the `uint` keyword (i.e. `uint8`, `uint16`, `uint24`, etc...).\n\nThe [Solidity Integer Documentation](https://solidity.readthedocs.io/en/v0.4.19/types.html#integers)  explains more.\n\n## Integer Overflow \n\nIf you go over the range of the memory space allocated it's considered an overflow and the value will be `0`. \n\nFor instance, if we have a 4-bit unsigned integer we have the range `0` through `15`. If we try to add two 4-bit integers together who both have the value `8` we'll wind up with a unsigned integer with the value `0` since `16` is one beyond the range of values.\n\n## Integer Underflow\n\nSimilar to Integer Overflow, if you go below the range allocated it will begin at the highest value. \n\nSo for a 4-bit integer where you subtract `5` from `4` you'd end up with `15`, because `4 - 5` would be a negative one which is below the range of an unsigned integer. \n",
  "language": "solidity",
  "language_version": "0.4.19",
  "position": 0,
  "task": "## Manage the Banana Stand\n\nLet's write a contract that will allow us to add and remove bananas from our banana stand. We'll need to be careful not to add too many or remove too many bananas! \n\n### Public Bananas \n\nFirst add a public `bananas` unsigned integer member variable. For our small banana stand we don't need to contain that many bananas, so use an unsigned integer type that will only take up [8 bits](?tab=details&scroll=Bits). \n\n### Add Bananas\n\nCreate a public function `addBananas` that will allow us to add bananas to our banana stand. It should take an 8-bit unsigned integer passed and add it to our `bananas` member variable.\n\nWe'll want to be careful not to [overflow our banana container](?tab=details&scroll=Integer%20Overflow).\n\n### Remove Bananas\n\nCreate a public function `removeBananas` that will allow us to remove bananas from our banana stand. It should take an 8-bit unsigned integer passed and subtract it from our `bananas` member variable.\n\nWe'll want to be careful not to [underflow our banana container](?tab=details&scroll=Integer%Underflow).",
  "test_framework": "truffle_with_mocha",
  "title": "Handling Bananas",
  "validated_contract": "BananaStand",
  "updated_at": "2018-11-08T02:51:28.511Z",
  "created_at": "2018-10-16T01:50:10.450Z",
  "abi_validations": [
    {
      "_id": "5b8492c6d9f9972c8de2efd1",
      "constant": "nil",
      "payable": "nil",
      "error": null,
      "task_display": "Add a public unsigned integer bananas",
      "name": "bananas",
      "type": "function",
      "outputs": [
        {
          "_id": "5b8492c6d9f9972c8de2efd2",
          "name": null,
          "type": "uint8"
        }
      ]
    },
    {
      "_id": "5b8492c6d9f9972c8de2efd3",
      "constant": "nil",
      "payable": "nil",
      "error": null,
      "task_display": "Add an addBananas function",
      "name": "addBananas",
      "type": "function",
      "inputs": [
        {
          "_id": "5b8492c6d9f9972c8de2efd4",
          "name": null,
          "type": "uint8"
        }
      ]
    },
    {
      "_id": "5b8492c6d9f9972c8de2efd5",
      "constant": "nil",
      "payable": "nil",
      "error": null,
      "task_display": "Add a removeBananas function",
      "name": "removeBananas",
      "type": "function",
      "inputs": [
        {
          "_id": "5b8492c6d9f9972c8de2efd6",
          "name": null,
          "type": "uint8"
        }
      ]
    }
  ]
}