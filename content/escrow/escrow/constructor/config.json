{
  "_id": "5adab204929d249e5faefb4d",
  "_type": "CodeStage",
  "code_file_ids": [
    "5adab204929d249e5faefb55",
    "5adab204929d249e5faefb59"
  ],
  "completion_message": "### Nicely Done!\n\nYou've laid the infrastructure for the Escrow Contract. Over the next two steps we'll continue to build on what you've wrote and make it completely functional. \n\nWe're looking forward to your progress on the next stage! ",
  "container_id": "5adab204929d249e5faefb4c",
  "details": "## Contract Constructor\n\nThe syntax for writing a function in Solidity is similar to JavaScript some differences being that it's a static typed language.\n\n```\nfunction EscrowContract (type varName, type varName2) public {\n  // your code here\n} \n```\n\nWhen writing the constructor function, the **function name should match the name of your contract**, the function arguments should have an **associated type** (similar to the address member variables we defined above) and include a **public visibility specifier**. \n\nThe public specifier allows access to the function from within as well as outside of the contract. Visit the [contracts](http://solidity.readthedocs.io/en/v0.4.19/contracts.html?highlight=contracts) section within the Solidity documentation for more information on function visibility.\n\nIt should also be noted that when passing in function arguments, it is convention to preface argument names with an underscore ( ```_``` ). This is purely a semantic convention which helps differentiate the global variable and function argument names, as they are usually the same.\n\nWithin the constructor function, **assign the global address member variables to their respective function arguments**. \n\nYou might have asked the yourself, *“What about the depositor of the funds?”* Fortunately, Solidity has a global variable which we can leverage in this situation. \n\nAssign the depositor address to the global variable ```msg.sender```. This built in global variable represents the address of the caller of the specified function, in this case the constructor.\n\nFor more information on global variables, check out the [Miscellaneous](http://solidity.readthedocs.io/en/v0.4.19/miscellaneous.html) section within the Solidity documentation.\n",
  "language": "solidity",
  "language_version": "0.4.19",
  "position": 1,
  "task": "## Contract Constructor\n\n1. Write a [Contract Constructor](?tab=details&scroll=Contract%20Constructor) that will store the addresses at each of the member variables you declared in the previous stage.\n> The `arbiter` and `beneficiary` will be arguments to the constructor (in that order respectfully) and the `depositor` will be the address calling the function.\n",
  "test_framework": "truffle_with_mocha",
  "title": "Constructor",
  "validated_contract": "EscrowContract",
  "updated_at": "2018-11-08T02:51:28.329Z",
  "created_at": "2018-10-16T01:50:10.339Z",
  "abi_validations": [
    {
      "_id": "5b730f5bd9f9970a465ebcd4",
      "constant": "nil",
      "payable": "nil",
      "error": "",
      "task_display": "Create a constructor that takes an arbiter and beneficiary as arguments",
      "name": null,
      "type": "constructor",
      "inputs": [
        {
          "_id": "5b730f5bd9f9970a465ebcd5",
          "name": "",
          "type": "address"
        },
        {
          "_id": "5b730f5bd9f9970a465ebcd6",
          "name": "",
          "type": "address"
        }
      ]
    }
  ]
}