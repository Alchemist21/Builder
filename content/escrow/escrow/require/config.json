{
  "_id": "5b082b71e6b0b05154025885",
  "_type": "CodeStage",
  "code_file_ids": [
    "5b082e1be6b0b05154025886",
    "5adab204929d249e5faefb55"
  ],
  "completion_message": "# So Security. Much Wow.\n\nYou just secured the hell out of the smart contract! YES. \n\nNext let's learn about how to log events on the blockchain! ",
  "container_id": "5adab204929d249e5faefb4c",
  "details": "## Require Statement\n\nSolidity allows you to call functions to revert state changes in the event that you should run into some unexpected condition. This will allow us to write conditional statements (like permissions in our case) that will ensure something is true, otherwise it will throw an exception.\n\nOne of these functions is `require` and its syntax looks as follows:\n\n```\nrequire(conditional logic);\n```\n\nLet's use this to ensure the `arbiter` is the only one allow to approve the escrow funds transfer. \n\n> Hint: Remember to use `msg.sender` to identify the caller of the function.",
  "language": "solidity",
  "language_version": "0.4.19",
  "position": 4,
  "task": "## Require Statement\n\nLet me ask you a question. On that last stage did you make sure that nobody else but the `arbiter` can call your `approve` function?  \n\nIf you did, kudos to you! \n\nIf not, we certainly don't want the `beneficiary` to be transfer the funds without approval! Let's add a [Require Statement](?tab=details)\n\n1. Ensure that if the `approve` function is called by anyone other than the `arbiter`, it will throw an exception and stop execution. ",
  "test_framework": "truffle_with_mocha",
  "title": "Require",
  "validated_contract": "EscrowContract",
  "updated_at": "2018-10-16T01:50:10.652Z",
  "created_at": "2018-10-16T01:50:10.652Z"
}