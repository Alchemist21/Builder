{
  "_id": "5adbdd4ae6b0b01e326503aa",
  "_type": "UiStage",
  "completion_message": "## Hoopla! \n\nDid I use that word wrong? \n\nWe are now ready to create our deploy function. **Test your code** and move on to the next stage!",
  "component_name": "AbiStage",
  "configuration": {
    "json_code_file_id": "5adab204929d249e5faefb54",
    "contract_code_file_id": "5adab204929d249e5faefb55"
  },
  "container_id": "5adab204929d249e5faefb4c",
  "details": "## Compile Contract\n\nIn order to store a smart contract on the blockchain, the solidity code must be compiled down to bytecode. This is accomplished using the **solc compiler**. However, the configuration required to compile a contract using solc can be quite difficult. Thankfully Truffle can help with the heavy lifting as a development environment, testing framework and asset pipeline for Ethereum.\n\n## Truffle\n\nUsing Truffle to compile your smart contracts makes life much easier as a Solidity developer. Once installed on your system, the ```truffle init``` command will create all the necessary folders and configurations files needed to compile your smart contracts. For more information on truffle please visit the [documentation](http://truffleframework.com/docs/).\n\nWithin this step, compile your smart contract with truffle to produce the output file **EscrowContract.json**. This JSON file is important because it includes:\n\n- the contract bytecode needed to store the contract on the blockchain\n- the Application Binary Interface (ABI) which allows you to call functions in a smart contract and receive data back\n\nTypically interacting with a smart contract requires us to make [RPC calls](https://github.com/ethereum/wiki/wiki/JSON-RPC) to ethereum nodes. The **web3.js** library makes this easy for solidity developers.\n\n**Look over the JSON file** to get familiar with the data structure and contents. In this contract, we will specifically use the bytecode and abi values.\n\n## Web3.js\n\nThe web3.js library was built to **enable JavaScript applications** the ability to interact with ethereum nodes and is recommended (almost necessary) when beginning to develop smart contracts.\n\nIf using NPM, you can install web3 using ```npm install web3``` on the command line. Once installed, you will have access to web3 functions within your application. For other installation methods and additional documentation, visit the web3.js [GitHub page](https://github.com/ethereum/web3.js).\n",
  "position": 6,
  "task": "## Truffle & Web3.js\n\n**Truffle** and **Web3** are tools to assist compiling and interacting with your smart contract. To learn more check out our [brief overview](?tab=details) of these tools.\n\n1. For this task, simply run \"Construct JSON\" to compile your code from the previous steps into an ABI and bytecode.\n",
  "title": "Truffle & Web3.js",
  "updated_at": "2018-10-16T01:50:10.227Z",
  "created_at": "2018-10-16T01:50:10.227Z"
}