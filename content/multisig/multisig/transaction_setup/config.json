{
  "_id": "5bce619fe6b0b012e91da44d",
  "_type": "CodeStage",
  "code_file_ids": [
    "5bcfc074e6b0b0328e69567a",
    "5bd228fbe6b0b0477817127c"
  ],
  "completion_message": "## Your awesomeness is deeply confirmed\n\nOk, we admit that was a bit of a setup stage. \n\nNext we'll move onto more functionality! ",
  "container_id": "5bce5e20e6b0b012e91da44b",
  "details": "",
  "language": "solidity",
  "language_version": "0.4.19",
  "position": 1,
  "task": "## Transaction Struct\n\nSince this is a multi-signature wallet, it requires the confirmation of several addresses to execute a transaction. We'll be the parameters for the transaction up-front so that the owners can sign off on it. We'll want to store these parameters in a struct so we can refer back when we execute the transaction.\n\nDefine a `Transaction` struct that includes these member variables in **the following order**: \n\n1. A `address` for the destination of the transaction's value.\n2. A `uint256` value of the transaction in wei. \n3. A `bool` which indicates if the transaction has been executed.\n\n## Transactions\n\nWe will also want to track the amount of transactions within the wallet and use the count to index our transactions in a lookup.\n\n1. Define a `uint256 transactionCount`.\n2. Define a public `transactions` mapping which maps a transaction ID to a `Transaction` struct.\n\n## Confirmations\n\nSince each transaction is only executed once all confirmations are received, we need to implement a way to check which `owners` have confirmed a transaction.\n\nDefine a nested `confirmations` mapping which maps a `transactionId` to a mapping of an owner `address` to a `bool` (whether or not they confirmed).",
  "test_framework": "truffle_with_mocha",
  "title": "Transaction Setup",
  "updated_at": "2018-11-08T02:51:28.617Z",
  "created_at": "2018-10-25T02:46:50.498Z",
  "validated_contract": "MultiSig",
  "abi_validations": [
    {
      "_id": "5bd70d99626daf74460af2dc",
      "constant": "true",
      "payable": "nil",
      "error": "",
      "task_display": "Create a public required function",
      "name": "required",
      "type": "function",
      "outputs": [
        {
          "_id": "5bd70d99626daf74460af2dd",
          "name": null,
          "type": "uint256"
        }
      ]
    },
    {
      "_id": "5bd70d99626daf74460af2de",
      "constant": "true",
      "payable": "false",
      "error": null,
      "task_display": "Create a public transactionCount function",
      "name": "transactionCount",
      "type": "function",
      "outputs": [
        {
          "_id": "5bd70d99626daf74460af2df",
          "name": null,
          "type": "uint256"
        }
      ]
    },
    {
      "_id": "5bd70d99626daf74460af2e0",
      "constant": "true",
      "payable": "false",
      "error": null,
      "task_display": "Create a transactions mapping",
      "name": "transactions",
      "type": "function",
      "outputs": [
        {
          "_id": "5bd70d99626daf74460af2e1",
          "name": null,
          "type": "address"
        },
        {
          "_id": "5bd70d99626daf74460af2e2",
          "name": null,
          "type": "uint256"
        },
        {
          "_id": "5bd70d99626daf74460af2e3",
          "name": null,
          "type": "bool"
        }
      ],
      "inputs": [
        {
          "_id": "5bd70d99626daf74460af2e4",
          "name": null,
          "type": "uint256"
        }
      ]
    },
    {
      "_id": "5bd70d99626daf74460af2e5",
      "constant": "true",
      "payable": "false",
      "error": null,
      "task_display": "Create a confirmations mapping",
      "name": "confirmations",
      "type": "function",
      "outputs": [
        {
          "_id": "5bd70d99626daf74460af2e6",
          "name": null,
          "type": "bool"
        }
      ],
      "inputs": [
        {
          "_id": "5bd70d99626daf74460af2e7",
          "name": null,
          "type": "uint256"
        },
        {
          "_id": "5bd70d99626daf74460af2e8",
          "name": "",
          "type": "address"
        }
      ]
    }
  ]
}