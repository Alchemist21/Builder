{
  "_id": "5b58fc7ad9f997399b71e3fe",
  "_type": "CodeStage",
  "code_file_ids": [
    "5b58fffbd9f997399b71e44a",
    "5b59004dd9f997399b71e44e",
    "5b69fdfbd9f9970c8b2af0e3"
  ],
  "completion_message": "## Superb! \n\nYou've created a list of `Votes` that we can store in our Voting contract. Next we're going to collect whether our vote participants support or deny the vote. ",
  "container_id": "5b58fc40d9f997399b71e3fd",
  "details": "## Structs \n\nStructs are a way to define your own data type that encompasses many different data types. It's pretty similar to a classic C struct or an object in JavaScript.\n\nA solidity struct looks something like this:\n\n```\nstruct Meeting {\n     bool started;\n     uint lengthInMinutes;\n}\n```\n\nA new struct can be created like so: \n\n```\nMeeting storage meeting = Meeting(false, 30);\n```\n\nYou'll notice the keyword `storage` was used here. This indicates that we're referencing an object in the actual smart contract state. \n\nBy changing the `meeting` variable here we recognize we are changing a value stored on the actual smart contract. For more information on data storage works in Solidity check out the documentation on [Data Location](http://solidity.readthedocs.io/en/v0.4.18/types.html#data-location)\n\nAnd for more information on structs, check out the [Solidity Documentation for structs](http://solidity.readthedocs.io/en/v0.4.18/types.html#structs)\n\n## Arrays\n\nAn array can hold a collection of data elements in Solidity. For example, for a collection of the data type `address` it can be declared as followed:\n\n```\naddress[] public myFriends;\n```\n\nWhere I have a list of my friends addresses. The `public` keyword here allows us to send a message to the contract asking for the address at a specific index in our array. \n\nA new address can be added by pushing it onto an array:\n\n```\nmyFriends.push(address);\n``` \n\nOr by specifying the index at which I'd like to store the new address:\n\n```\nmyFriends[0] = address;\n```\n\nSimilarly the address can be looked up by an index. At any point the length can be looked up through the member `length` property. \n\nFor our purposes it's important to note we can also create an array of structs like our `Meeting` [struct](?tab=details&scroll=Structs). Something like:\n\n```\nMeeting[] public myMeetings;\n```\n\nFor more detailed information on arrays check out the [Solidity Documentation for arrays](http://solidity.readthedocs.io/en/v0.4.18/types.html#arrays).",
  "language": "solidity",
  "language_version": "0.4.18",
  "position": 0,
  "task": "## Creating Votes\n\nAlright, let's get started, shall we?\n\n### Public Votes\n\nLet's create a  [public member array](?tab=details&scroll=Arrays) `votes` which contain instances of a `Vote` [struct](?tab=details&scroll=Structs).\n\n### Vote Struct\n\nThe `Vote` [struct](?tab=details&scroll=Structs) will contain both the `address` of the vote creator and a `string` for the vote question. \n\n### New Vote Function\n\nFinally let's create an  `external` function for creating new votes called `newVote`. \n\nThis `newVote` method will be passed a `string` argument which contains a question for the vote. Use this `string` and the `msg.sender` to populate a new `Vote` struct instance and `push` it on the `votes` array. ",
  "test_framework": "truffle_with_mocha",
  "title": "Create a Vote",
  "validated_contract": "Voting",
  "updated_at": "2018-11-08T02:51:28.883Z",
  "created_at": "2018-10-16T01:50:10.697Z",
  "abi_validations": [
    {
      "_id": "5b731564d9f9970a465ebce7",
      "constant": "nil",
      "payable": "nil",
      "error": "Could not find a public newVote function",
      "task_display": "Create a newVote function.",
      "name": "newVote",
      "type": "function",
      "inputs": [
        {
          "_id": "5b731564d9f9970a465ebce8",
          "name": "",
          "type": "string"
        }
      ]
    },
    {
      "_id": "5b731564d9f9970a465ebce9",
      "constant": "nil",
      "payable": "nil",
      "error": "",
      "task_display": "Create a public array votes which is a collection of the struct Vote.",
      "name": "votes",
      "type": "function",
      "outputs": [
        {
          "_id": "5b731564d9f9970a465ebcea",
          "name": "creator",
          "type": "address"
        },
        {
          "_id": "5b731564d9f9970a465ebceb",
          "name": "question",
          "type": "string"
        }
      ],
      "inputs": [
        {
          "_id": "5b731564d9f9970a465ebcec",
          "name": null,
          "type": "uint256"
        }
      ]
    }
  ]
}