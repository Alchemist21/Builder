{
  "_id": "5b59174bd9f997399b71e48b",
  "_type": "CodeStage",
  "code_file_ids": [
    "5b591772d9f997399b71e48c",
    "5b58fffbd9f997399b71e44a",
    "5b69fdfbd9f9970c8b2af0e3"
  ],
  "completion_message": "## WELL DONE. \n\nWe hope you're enjoying what you've accomplished so far. Look over your code and feel that pride! \n\nNow that we've handled the majority of the voting logic, we'll need to add some events to trigger changes on our front-end.",
  "container_id": "5b58fc40d9f997399b71e3fd",
  "details": "## Recommended Approach\n\nThere's several approaches to solving this problem and we have one particular recommended approach. \n\nIt begins by adding a [mapping](?tab=details&scroll=Mapping) to our `Vote` struct: \n\n```\nstruct Vote {\n        address creator;\n        string question;\n        uint256 yes;\n        uint256 no;\n        mapping (address => VoteStates) voterStates;\n}\n```\n\nWhere `VoteStates` refers to an [enum](?tab=details&scroll=Enum) of three possible values: `Absent`, `Yes` and `No`.\n\n```\nenum VoteStates {Absent, Yes, No}\n```\n\nThis will allow us to keep track of which users have already voted and what their current state is. \n\nIf you have any trouble [jump into our Slack channel!](https://join.slack.com/t/chainshotnodes/shared_invite/enQtMzU3ODc5NTM3MTI3LTFlZTY1YzcwM2QzYWI0ODY2ZDczMmYzOTVlYWQwZjkyZDFlYzUxZWM4NDNlNjk3N2EyNGMwOGQ0ZTVkZjQyNjE)\n\n## Enum\n\nIf we needed to represent three states with a value, you can imagine using numbers, let's say `0`,`1`, `2`. In our minds we can associate states to these numbers like someone not voting could be `0`, someone voting yes is `1` and someone voting no is `2`. However, when we go back to look at the states it's pretty difficult to tell what they mean in the code.\n\nConsider:\n\n```\nif(status == 1) { \n  // do something\n}\n```\n\nUnless you happen to know what that number means, this code isn't very readable. For that reason Solidity, like many languages, introduces the `enum` type. \n\nWe can create a list of states:\n\n```\nenum VoteStates {Absent, Yes, No}\n```\nAnd then we can use those states to assign and look up a state:\n\n```\nVoteStates state = VoteStates.No;\nif(state == VoteStates.No) { \n  // do something\n}\n```\n\nYou can find more information on enums in the [Solidity Documentation](http://solidity.readthedocs.io/en/v0.4.18/types.html#enums)\n\n## Mapping \n\nOften it's useful to create an easy way to lookup values by a particular key. In these cases, a `mapping` can be super useful. We'll map a particular `value` to some output value. \n\nFor instance, if we held a contest it might be useful to have a mapping of our participants addresses to whether or not they have submitted an entry. Something like that might look like this:\n\n```\nmapping(address => bool) submissions;\n```\n\nThen we can lookup by address whether or not the participant has made a submission with `submissions[address]`. Maybe even more useful would be if we had a struct for submissions and we could map the participant's address to a data type with more information about their submission!\n\nHow could this useful for our voting application? We'll want to consider whether or not someone has voted before. If so, we'll want to use that vote to determine what we should do to the total tally in order to not count them twice. ",
  "language": "solidity",
  "language_version": "0.4.18",
  "position": 2,
  "task": "## Voting Multiple Times\n\nOK, this task is straightforward to understand yet tricky to implement! \n\nWe want to handle the case where the same address votes more than once. We should let the voter change their vote, so if they vote yes and then vote no it should count as one no vote.\n\n> This is a difficult challenge, so you're welcome to go right ahead and give it a try. If you get stuck or you don't know where to being check out our [Recommended Approach](?tab=details&scroll=Recommended%20Approach)!",
  "test_framework": "truffle_with_mocha",
  "title": "Multiple Votes",
  "validated_contract": "Voting",
  "updated_at": "2018-10-16T01:50:10.257Z",
  "created_at": "2018-10-16T01:50:10.257Z"
}