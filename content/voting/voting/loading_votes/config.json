{
  "_id": "5b5f8a45d9f9972276897f03",
  "_type": "CodeStage",
  "code_file_ids": [
    "5b5f8c47d9f997cca33a51f7",
    "5b5f8c92d9f997cca33a51f8",
    "5b5f8cc3d9f997cca33a51f9",
    "5b5f8ce6d9f997cca33a51fa",
    "5b5f8d62d9f997cca33a5208",
    "5b5f8c20d9f997cca33a51f6"
  ],
  "completion_message": "## Locked and Loaded\n\nNicely done, now we can load votes into our front-end application. This is a huge step. \n\nNext we'll listen for events from our `Voting` contract and update our application state accordingly!",
  "container_id": "5b58fc40d9f997399b71e3fd",
  "details": "## Aragon Intents\n\nIn Aragon an intent means an attempt to invoke an action from the smart contract. The idea is that the `intent` is what you want to do and then Aragon's governance system will help you figure out how to get that `intent` accomplished according to governance rules in place. \n\nOnce we have an Aragon app setup from our aragon client library, we can simply call a method or use `call` to retrieve data without modifying the state of smart contract. Since it's what we'll be using here's an example using `call`:\n\n```\nconst app = new AragonApp()\n\n// Sends an intent that we would like to call the \n// orderPizza function our contract with an argument 2\napp.call('orderPizza', 2)\n```\n\nYou can find more about the call method [here](https://hack.aragon.org/docs/aragonjs-ref.html#call)\n\n## Observables\n\nObservables are a proposal for ESMAScript and are implemented by several libraries. They are a type designed for better handling of asynchronous events and are especially well suited towards handling asynchronous behavior in UIs. \n\nIt's not necessary to be an expert with observables to pass this stage. We'll just need to understand the objective behind the `map` function. We're trying to take some object and transform it. So to stick with the pizza example above:\n\n```\napp.call('orderPizza', 2)\n      .map(pizza =>  {\n           pizza.count = parseInt(pizza.count);\n           return pizza;\n       }) \n```\nAlternatively, instead of modifying the `pizza` object we could pass back a new object with all the `pizza` properties plus the new ones that we want to transform.\n\nTo learn more about observables check out this [proposal Github page](https://github.com/tc39/proposal-observable)",
  "language": "javascript",
  "language_version": "8.x/babel",
  "position": 5,
  "task": "## Loading Votes\n\nOur next task is to load data from the our smart contract state into our front-end. To do so we're going to use the [Aragon JS library](https://hack.aragon.org/docs/aragonjs-ref.html)\n\nSpecifically we're going to write a function which sends an [intent](?tab=details&scroll=Aragon%20Intents) to the Aragon wrapper to load the vote.\n\nAlready written for you is the function `loadVote` which returns an [observable](?tab=details&scroll=Observables). We'll need to make two changes to this function to get the vote data we need for our application:\n\n1. Lookup the vote using the [call](https://hack.aragon.org/docs/aragonjs-ref.html#call) method on the AragonApp. We'll need to call our `votes` method with the `id` for that particular vote.\n2. Use the [observable](?tab=details&scroll=Observables) `map` function to take the vote returned and transform it. The `vote` will have the `yes`, `no`, `creator` and `question` properties. Be sure to:\n    * Parse the `yes` vote count from a string into an integer \n    * Parse the `no` vote count from a string into an integer \n    * Pass along the vote `id` as one of the properties\n    * Include the `creator` and `question` properties ",
  "test_framework": "mocha_bdd",
  "title": "Loading Votes",
  "updated_at": "2018-10-16T01:50:10.213Z",
  "created_at": "2018-10-16T01:50:10.213Z"
}