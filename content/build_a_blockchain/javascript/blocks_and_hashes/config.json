{
  "_id": "5b3afdd3d9f99763e5c4b502",
  "_type": "CodeStage",
  "code_file_ids": [
    "5b3afe0cd9f99763e5c4b503",
    "5b3b061dd9f99763e5c4b509"
  ],
  "completion_message": "### Great job! \n\nNext we're going to make that hash have some meaning.",
  "container_id": "5b3afd70d9f99763e5c4b4fe",
  "details": "## What's a block?\n\nQuite simply you can think of a block as a container. It contains some metadata about it's creation and data contained within it. These properties are hashed together into a string of fixed length to link this block to other blocks in a blockchain. \n\n## Hash Function\n\nHash functions are used to take messages of any size and reduce them down to a series of bits of a specific size.  \n\nAn ideal cryptographic hash function can, given any input, return a consistent and seemingly random output. The randomness characteristic needs to be strong enough where it's not possible to re-construct the input from the output.\n\nFor example the `sha256` algorithm will take an input like `Dan` and return a consistent output: \n\n`b1259567b8a27cd0ee0ce4c79d0670c75bada9e86dcdeff374ffd922d41cbe7e`\n\nIf, instead my input was the lower case `dan`, the result would be **completely** different: \n\n`ec4f2dbb3b140095550c9afbbb69b5d6fd9e814b9da82fad0b34e9fcbe56f1cb`\n\nThese outputs appear random in relation to their input and are also **consistent**. Meaning the same input will always return the same output. \n\n## Crypto-JS\n\nThe `crypto-js` library provides us with a number of cryptographic utilities written as JavaScript function. Specifically the `SHA256` method is an implementation of the SHA256 algorithm designed by the NSA. This function will take any string as an argument, regardless of size, and hash it to a 256 bit array. If we call `toString()` on that returned object we'll receive a 64 character hexadecimal string.\n\n## Hexadecimal\n\nYou'll notice that the outputs shown consist of a set of characters spanning `a` through `f` and `0` through `9`. This is because it has become commonplace to use hexadecimal when displaying a hash. \n\nFor the test file in this stage you'll notice that the hash of the block is being tested by the regex `/^[0-9A-F]{64}$/i`. It's simply testing to see that this is a hexadecimal output of 64 characters. This is the expected size for a `sha256` hash. \n\nFor now the hash can be anything, in the next stage we'll start to make it specific to the block.",
  "language": "javascript",
  "language_version": "8.x/babel",
  "position": 0,
  "task": "## Return a hash from the Block\n\nIn your `block.js` file there is a class representing a [Block](?tab=details&scroll=What's%20a%20block%3F). Our goal in this stage is to create a hash property on this block.\n\nUsing the `SHA256` function from the [Crypto JS Library](?tab=details&scroll=Crypto-JS), return any  [hash](?tab=details&scroll=Hash%20Function) from within the `toHash` function. \n\nFor now, there's no need to hash anything in particular since the block contains no properties. You can hash a message, an empty string or nothing at all! ",
  "test_framework": "mocha_bdd",
  "title": "Blocks and Hashes",
  "updated_at": "2018-10-16T01:50:10.187Z",
  "created_at": "2018-10-16T01:50:10.187Z"
}