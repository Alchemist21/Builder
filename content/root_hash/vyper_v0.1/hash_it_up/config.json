{
  "_id": "5be187b1626daf0f9392cf3e",
  "_type": "CodeStage",
  "container_id": "5be1866f626daf0f9392cf38",
  "title": "Hash it up",
  "position": 0,
  "task": "## Determine the Root Hash\n\nHey there! \n\nThe goal of this challenge is to take a potentially large byte array and reduce it to a single 32 byte hash. \n\n## Reduction Algorithm\n\nThe algorithm will work like this:\n\n1. Given a bytes array, divide it into parts 32 bytes long.\n2. Concatenate the first two parts, hash them with `sha3`. \n3. Use the result from step 2, concatenate it with the next part and hash them together.\n4. Repeat step 3 until reduced to a single `bytes32`.\n\nIt's often much easier to look at [examples](?tab=details&scroll=Examples), which are available on the Details pane.\n\n## The findRoot function\n\nOn your contract create a `findRoot` function that will take in `bytes` array and return a `bytes32`. \n\nThe `bytes` array will be a collection of bytes of some length divisible by 32. For our testing purposes, maximum size of this byte array will not exceed 320 bytes.\n\nThe `bytes32` will be the root hash that is determined by the algorithm described above and by the [examples](?tab=details&scroll=Examples).",
  "details": "## Examples\n\nLet's say we had 96 bytes: \n\n```\n[ bytes 0 - 31 ] [ bytes 32 - 63 ] [ bytes 64 - 95 ]\n```\n\nWe divide it up into three parts and label them `A`, `B`, and `C` from left to right respectively with the byte ranges shown above. \n\nFirst we'll hash `A` and `B`:\n\n```\n[   sha3(A + B)   ] [    C    ]\n```\n\nNext we'll take the hash of `A` and `B` and concatenate `C` and take the resulting hash from that as well:\n\n```\n[   sha3(sha3(A + B) + C)   ] \n```\n\nThis pattern will repeat itself for longer byte arrays as well. For example, if we had 160 bytes we can divide it up into five 32 byte parts `A`, `B`, `C`, `D`, and `E` from left to right respectively.\n\nFollowing the same algorithm we'd wind up with a single hash:\n\n```\nsha3(sha3(sha3(sha3(A + B) + C) + D) + E)\n```",
  "validated_contract": "Root",
  "language_version": "0.1.0b3",
  "language": "vyper",
  "test_framework": "truffle_with_mocha",
  "updated_at": "2018-11-08T02:51:28.664Z",
  "created_at": "2018-11-06T12:23:13.629Z",
  "abi_validations": [
    {
      "_id": "5be311c7626daf0f9392cf78",
      "constant": "true",
      "payable": "false",
      "error": null,
      "task_display": "Create a function findRoot which takes in bytes and returns bytes32",
      "name": "findRoot",
      "type": "function",
      "outputs": [
        {
          "_id": "5be311c7626daf0f9392cf79",
          "name": null,
          "type": "bytes32"
        }
      ],
      "inputs": [
        {
          "_id": "5be311c7626daf0f9392cf7a",
          "name": null,
          "type": "bytes"
        }
      ]
    }
  ],
  "code_file_ids": [
    "5be187e3626daf0f9392cf42",
    "5be188da626daf0f9392cf44"
  ],
  "completion_message": ""
}