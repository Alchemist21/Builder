{
  "_id": "5b8df954e6b0b0577be62802",
  "_type": "CodeStage",
  "code_file_ids": [
    "5b8df9b2e6b0b0577be62803",
    "5b8dfa9ce6b0b0577be62807"
  ],
  "completion_message": "",
  "container_id": "5b8df76ce6b0b0577be62801",
  "details": "## Externally Manipulated Arrays\n\nThe `distribute` function loops through the `validInvestors` array in order to transfer tokens to the respective investors balance. \n\nSince the `validInvestors` array size can be manipulated outside of the context of the smart contract, if a bad actor wanted to flood the network and deny service they could continually invest small amounts of Ether into the contract causing the distribute method to run longer than expected.\n\nWe can prevent this behavior by moving the responsibility of distribution from the `owner` to the individual investor.\n\n## Owners Operations\n\nNotice that the `distribute` function is required to be called by the `owner`. In normal circumstances, this makes sense but what if owner never called the `distribute` function? \n\nThis could happen for many reasons such as the owner lost the owner address credentials associated to the contract or even passed away and was the only person to know the owner address credentials. In any case, the contract investments are now locked up forever denying them from converting their investment to tokens.\n\nWe can prevent this behavior by adding an additional option for calling this function such as an `unlockTime`, allowing investors access to their tokens.",
  "language": "solidity",
  "language_version": "0.4.18",
  "position": 0,
  "task": "In `Investment.sol` you'll see we have a smart contract that allows users to invest into a smart contract for a later distribution of tokens. \n\nAs it currently stands there are two Denial of Service (DoS) vulnerabilities within this smart contract, specifically in the `distribute` function:\n\n- [Externally Manipulated Arrays](?tab=details&scroll=Externally%20Manipulated%20Arrays)\n- [Owners Operations](?tab=details&scroll=Owners%20Operations)\n\n## How do we fix these vunerabilities?\n\n1) First, we'll pass in an `unlockTime` variable into our constructor which will allow investors to approve the distribution after a certain time period if the owner is unable to do so. This will be an integer number of days until the distribution can be approved.\n\n2) Write an `approveWithdraw` function which will unlock the distribution and allow investors to `withdraw`. This function should only be called by the owner of the contract or is callable by any address after an `unlockTime` is reached. \n\n3) Finally, write a `withdraw` function which allows an investor to convert their investment into tokens. This will need to be approved in the `approveWithdraw` function before withdrawals can be processed.\n\nThe `withdraw` and `approveWithdraw` functions will replace the vulnerable `distribute` function. \n\n> Hint: `block.timestamp` will return the timestamp of the current block in seconds since the epoch.\n\n> Hint: Re-factoring the existing code is a major part of this challenge.",
  "test_framework": "truffle_with_mocha",
  "title": "You can't deny me",
  "validated_contract": "Investment",
  "updated_at": "2018-11-08T02:51:28.464Z",
  "created_at": "2018-10-16T01:50:10.433Z",
  "abi_validations": [
    {
      "_id": "5b90b8d6929d2410a2b838de",
      "constant": "nil",
      "payable": "nil",
      "error": null,
      "task_display": "Create the approveWithdraw function",
      "name": "approveWithdraw",
      "type": "function"
    },
    {
      "_id": "5b90b8d6929d2410a2b838df",
      "constant": "nil",
      "payable": "nil",
      "error": null,
      "task_display": "Create the withdraw function",
      "name": "withdraw",
      "type": "function"
    }
  ]
}