{
  "_id": "5ba155e6d9f997cd2e33eba8",
  "_type": "CodeStage",
  "code_file_ids": [
    "5ba15668d9f997cd2e33ebab",
    "5ba15643d9f997cd2e33ebaa",
    "5ba1562ad9f997cd2e33eba9"
  ],
  "completion_message": "## We got Root!\n\nNow that we've established our root, it's time to get squirrely.\n\nNext we build a larger Merkle Tree!",
  "container_id": "5ba1558bd9f997cd2e33eba7",
  "details": "## Constructor\n\nA constructor is a specially named function in a [JavaScript Class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_declarations) that will be called when an instance is created with `new`. \n\nTo add a constructor, simply use the `constructor` keyword as the name of the function within the class. \n\n## Concat Function\n\nTo simplify this merkle tree implementation and to make debugging easier, we'll pass a concatenation function from the tests into the MerkleTree constructor.\n\nThis is the function that combines two leaf nodes and hashes them together. For instance in a four-leaf tree:\n\n```\n    Root   \n    / \\    \n   AB  CD  \n  / \\  / \\ \n  A B  C D\n```\n\nThis function is used three times, for each combination. I'll write it here as `Hash`:\n\n`Hash(Hash(A + B) + Hash(C + D))` \n\n> If you deep dive into the test cases you'll notice that we can even use the concatenation function to determine the hashing path you used (in the format shown above) to help with debugging in the next few steps. \n\n",
  "language": "javascript",
  "language_version": "8.x/babel",
  "position": 0,
  "task": "## Combine Two Leaves\n\nAlright, let's build us a Merkle Tree! \n\nThe goal here is to take a bunch of \"leaves\" (the data hashes that make up the bottom layer of the tree) and hash them together two at a time to form a tree-like structure.\n\n### Add a Constructor\n\nFirst things first, write a [constructor](?tab=details&scroll=Constructor) for our MerkleTree class. This constructor will take two arguments:\n\n1. An array of leaf nodes for the Merkle Tree.\n2. A `concat` function which can be used to concatenate two hashes together to form a new hash. \n\nStore both of these arguments on the Merkle Tree instance. \n\n### Let's get to the Root\n\nNow we need to add a function `getRoot` to our class that allows us to find the merkle root. \n\nFor this stage the only test case setup is taking two roots and hashing them together. Our tree will look like this:\n\n```\n    Root\n    /  \\ \n   A    B\n```\nWhere `A` and `B` are our leaf hashes and the root is the combined hash.\n\nWe'll simply need to take our two leaf hashes and combine them using the `concat` function passed into the MerkleTree constructor. This function expects two arguments, the left and right leaf node. You can find more information on the `concat` function [in Details](?tab=details&scroll=Concat%20Function).\n\nOn the next stage we'll move onto some more in-depth scenarios.\n",
  "test_framework": "mocha_bdd",
  "title": "Combine Two Leaves",
  "updated_at": "2018-10-16T01:50:10.200Z",
  "created_at": "2018-10-16T01:50:10.200Z"
}